-- MySQL Script generated by MySQL Workbench
-- Mon Jul 22 10:14:38 2019
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema Orphanet
-- -----------------------------------------------------
-- Table storing multiple disease ontology ids for Monarch Initiative

-- -----------------------------------------------------
-- Schema Orphanet
--
-- Table storing multiple disease ontology ids for Monarch Initiative
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `Orphanet` DEFAULT CHARACTER SET utf8 ;
USE `Orphanet` ;

-- -----------------------------------------------------
-- Table `Orphanet`.`Orphanet_entryId`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Orphanet`.`Orphanet_entryId` (
  `DB` VARCHAR(45) NOT NULL COMMENT 'Name original database/ontology',
  `id` VARCHAR(45) NOT NULL COMMENT 'Disease ontology identifier from Orphanet',
  `def` VARCHAR(250) NULL,
  `level` INT NOT NULL,
  PRIMARY KEY (`DB`, `id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Orphanet`.`Orphanet_crossId`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Orphanet`.`Orphanet_crossId` (
  `DB1` VARCHAR(45) NOT NULL COMMENT 'Name database for id1',
  `id1` VARCHAR(45) NOT NULL COMMENT 'disease ontology identifier',
  `DB2` VARCHAR(45) NOT NULL COMMENT 'Name database id2',
  `id2` VARCHAR(45) NOT NULL COMMENT 'Crossreference disease ontology id to id1',
  PRIMARY KEY (`DB1`, `id1`),
  INDEX `fk_crossId_entryId_idx` (`DB1` ASC, `id1` ASC) VISIBLE,
  CONSTRAINT `fk_crossId_entryId`
    FOREIGN KEY (`DB1` , `id1`)
    REFERENCES `Orphanet`.`Orphanet_entryId` (`DB` , `id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Orphanet`.`Orphanet_parentId`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Orphanet`.`Orphanet_parentId` (
  `DB` VARCHAR(45) NOT NULL COMMENT 'Database for id',
  `id` VARCHAR(45) NOT NULL COMMENT 'Disease ontology identifier from Orphanet',
  `pDB` VARCHAR(45) NOT NULL COMMENT 'Name database for parent id',
  `parent` VARCHAR(45) NOT NULL COMMENT 'Parent ontology for id in Monarch Disease Ontology ',
  `origin` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`DB`, `id`),
  INDEX `DB, id_idx` (`pDB` ASC, `parent` ASC) VISIBLE,
  CONSTRAINT `fk_table1_entryId1`
    FOREIGN KEY (`DB` , `id`)
    REFERENCES `Orphanet`.`Orphanet_entryId` (`DB` , `id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `DB, id`
    FOREIGN KEY (`pDB` , `parent`)
    REFERENCES `Orphanet`.`Orphanet_entryId` (`DB` , `id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Orphanet`.`Orphanet_idNames`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Orphanet`.`Orphanet_idNames` (
  `DB` VARCHAR(45) NOT NULL COMMENT 'Name original database',
  `id` VARCHAR(45) NOT NULL COMMENT 'Disease ontology identifier from Orphanet',
  `syn` VARCHAR(45) NOT NULL COMMENT 'Term (synonym or label) to describe the disease',
  `canonical` TINYINT NOT NULL COMMENT 'Current label for the entry',
  PRIMARY KEY (`DB`, `id`),
  CONSTRAINT `fk_table1_entryId2`
    FOREIGN KEY (`DB` , `id`)
    REFERENCES `Orphanet`.`Orphanet_entryId` (`DB` , `id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Orphanet`.`Orphanet_sourceFiles`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Orphanet`.`Orphanet_sourceFiles` (
  `url` VARCHAR(45) NOT NULL COMMENT 'URL location of source files',
  `current` VARCHAR(45) NOT NULL COMMENT 'Date of the current version of the source files',
  PRIMARY KEY (`url`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Orphanet`.`Orphanet_EpidemiologicalDiseaseInfo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Orphanet`.`Orphanet_EpidemiologicalDiseaseInfo` (
  `DB` VARCHAR(45) NOT NULL COMMENT 'Ontology database (private key)',
  `id` VARCHAR(45) NOT NULL COMMENT 'Concept identifier (private key)',
  `type` VARCHAR(45) NOT NULL COMMENT 'Type of concept (Biological anomaly, Clinical subtype, Clinical syndrome, Disease, Etiological subtype, Group of phenomes, Histopathological subtype, Malformation syndrome, Morphological anomaly, Particular clinical situation in a disease or syndrome )',
  `prevalenceType` VARCHAR(45) NOT NULL COMMENT 'Type of prevalence presented:\nPoint prevalence: Number of cases scaled up to the general population at a given time. \n\nBirth prevalence: Number of cases observed at birth relative to the number of children born alive at a given moment.\n\nAnnual incidence: Number of newly diagnosed cases in a population in one year. \n\nLifetime prevalence: Number of cases presenting or having presented the clinical entity during their lifetime scaled up to the general population. \nCases/families: Number of cases or family (ies) published in the literature.',
  `prevalenceQualification` VARCHAR(45) NOT NULL COMMENT 'Identication on the type of information available: prevalenceClass and/or prevalenceValue',
  `prevalenceGeographic` VARCHAR(45) NOT NULL COMMENT 'Geographic location of prevalence information',
  `prevalenceClass` VARCHAR(45) NULL COMMENT 'Prevalence class available: \n<1 / 1 000 000, Unknown, 1-9 / 1 000 000, 1-9 / 100 000, 1-5 / 10 000, 6-9 / 10 000, >1 / 1000, Not yet documented\"',
  `prevalenceValue` VARCHAR(45) NOT NULL COMMENT 'Value of prevalence: in case of case this is the number of cases per geographic location',
  `prevalenceValidationStatus` VARCHAR(45) NULL COMMENT 'Validation status of the prevalence: Validated, Not yet validated',
  `prevalenceSource` VARCHAR(45) NOT NULL,
  `label` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`DB`, `id`),
  CONSTRAINT `fk_EpidemiologicalDiseaseInfo`
    FOREIGN KEY (`DB` , `id`)
    REFERENCES `Orphanet`.`Orphanet_entryId` (`DB` , `id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Orphanet`.`Orphanet_DiseaseVariants`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Orphanet`.`Orphanet_DiseaseVariants` (
  `DB` VARCHAR(45) NOT NULL,
  `id` VARCHAR(45) NOT NULL,
  `label` VARCHAR(100) NOT NULL,
  `prevalenceSource` VARCHAR(100) NOT NULL,
  `Ens_gene` VARCHAR(45) NOT NULL,
  `associationType` VARCHAR(100) NOT NULL,
  `associationStatus` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`DB`, `id`),
  CONSTRAINT `fk_DiseaseVariants`
    FOREIGN KEY (`DB` , `id`)
    REFERENCES `Orphanet`.`Orphanet_entryId` (`DB` , `id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
